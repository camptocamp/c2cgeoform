<span tal:define="name name|field.name;
                  css_class css_class|field.widget.css_class;
                  oid oid|field.oid;
                  style style|field.widget.style;"
      tal:omit-tag="" i18n:domain="c2cgeoform">
    <input type="hidden" name="${name}" value="${cstruct}" 
           tal:attributes="class string: form-control ${css_class or ''};
                           style style"
           id="${oid}"/>
    <div id="map_${oid}" class="map"></div>
    <style>
      .map {
        height: 400px;
        width: 100%;
      }
    </style>
    <script type="text/javascript">
      deform.addCallback(
        '${oid}',
        function (oid) {
          if (oid in c2cgeoform.maps) return true;

          var controlsDefinition = ${controls_definition};
          var geoJson = '${cstruct}';

          /** Default center and zoom when no geometry is given. */
          var defaultCenter = [829170, 5933942];
          var defaultZoom = 7;
          /** Minimum zoom when a geometry is given. */
          var zoomForGeometry = 14;

          /** Translations */
          c2cgeoform.i18n = {};
          c2cgeoform.i18n['zoomInTipLabel'] = '${_('Zoom In')}';
          c2cgeoform.i18n['zoomOutTipLabel'] = '${_('Zoom Out')}';
          c2cgeoform.i18n['attributionTipLabel'] = '${_('Attributions')}';
          controlsDefinition['drawPointTooltip'] = '${_('Draw point')}';
          controlsDefinition['drawLineTooltip'] = '${_('Draw line')}';
          controlsDefinition['drawPolygonTooltip'] = '${_('Draw polygon')}';
          controlsDefinition['modifyTooltip'] = '${_('Modify')}';
          controlsDefinition['clearTooltip'] = '${_('Remove all')}';

          var source = new ol.source.Vector();
          var vector = new ol.layer.Vector({
            source: source,
            style: c2cgeoform.measureStyle(
              new ol.style.Style({
                fill: new ol.style.Fill({
                  color: 'rgba(255, 255, 255, 0.2)'
                }),
                stroke: new ol.style.Stroke({
                  color: '#ffcc33',
                  width: 2
                }),
                image: new ol.style.Circle({
                  radius: 7,
                  fill: new ol.style.Fill({
                    color: '#ffcc33'
                  })
                })
              })
            )
          });

          var map = new ol.Map({
            target: 'map_'+oid,
            layers: [
              new ol.layer.Tile({
                source: new ol.source.MapQuest({layer: 'osm'})
              }),
              vector
            ],
            view: new ol.View({
              center: defaultCenter,
              zoom: defaultZoom
            }),
            controls: ol.control.defaults({
              zoomOptions: {
                zoomInTipLabel: c2cgeoform.i18n['zoomInTipLabel'],
                zoomOutTipLabel: c2cgeoform.i18n['zoomOutTipLabel']
              },
              attributionOptions: {
                tipLabel: c2cgeoform.i18n['attributionTipLabel'],
                collapsible: false
              }
            })
          });

          c2cgeoform.addFeature(map, source, geoJson, zoomForGeometry, controlsDefinition);
          c2cgeoform.initializeToolbar(map, source, {
            controlsDefinition: controlsDefinition,
            updateField: function(newGeoJson) {
              $('#' + oid).val(newGeoJson);
            }
          });
          c2cgeoform.maps[oid] = map;
        }
      );
    </script>
</span>
